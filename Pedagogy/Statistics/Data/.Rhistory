}
df <- personality
df <- remove.outliers(df, BMI)
remove.outliers <- function(data, variable, treshold=1.96){
var <- data %>%
filter(eval(quote(variable), data) > treshold)
# *mean(eval(variable, data)))
return(var)
}
df <- personality
df <- remove.outliers(df, BMI)
variable=BMI
remove.outliers <- function(data, variable, treshold=1.96){
variable <- substitute(variable)
var <- data %>%
filter(variable > treshold)
# *mean(eval(variable, data)))
return(var)
}
df <- personality
df <- remove.outliers(df, BMI)
remove.outliers <- function(data, variable, treshold=1.96){
variable <- substitute(variable)
print(variable)
var <- data %>%
filter(variable > treshold)
# *mean(eval(variable, data)))
return(var)
}
df <- personality
df <- remove.outliers(df, BMI)
remove.outliers <- function(data, variable, treshold=1.96){
variable <- substitute(variable)
print(variable)
var <- data %>%
filter(eval(variable, data) > treshold)
# *mean(eval(variable, data)))
return(var)
}
df <- personality
df <- remove.outliers(df, BMI)
remove.outliers <- function(data, variable, treshold=1.96){
variable <- substitute(variable)
print(variable)
var <- filter(data, variable > treshold)
# *mean(eval(variable, data)))
return(var)
}
df <- personality
df <- remove.outliers(df, BMI)
eval("2+2")
parse("2+2")
deparse("2+2")
quote("2+2")
eval("2+2")
substitute("2+2")
?setNames
install.packages("neuropsychology")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(neuropsychology)
?download_RStudio_CRAN_data
library(installr)
?download_RStudio_CRAN_data
data <- download_RStudio_CRAN_data(START = '2016-09-01')
data <- read_RStudio_CRAN_data(data)
lineplot_package_downloads("neuropsychology")
lineplot_package_downloads("neuropsychology", data)
barplot_package_downloads("neuropsychology", data)
lineplot_package_downloads(c("neuropsychology", "psych"), data)
lineplot_package_downloads(c("neuropsychology"), data)
?install.packages
require(neuropsychology)
df <- select_numeric(personality)
library(psych)
require(psych)
fa <- psych::fa(df)
fa_loadings(fa)$max
fa_loadings(fa)
5/:14
5/14
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
setwd("D:/Programs/Dropbox/RECHERCHE/articles/Package_Mindfulness/Zodiac/Statistics")
library(knitr)
library(neuropsychology)
library(tidyverse)
library(lsmeans)
library(lme4)
df <- read.csv("df.csv")
library(DescTools)
library(insol)
library(lubridate)
# Zodiac Sign
df$Zodiac <- Zodiac(df$Birthdate)
# Seasons
df$Season <- season(df$Birthdate)
# Insolation
df$Insolation <- daylength(lat=48.5, long=2.20, jd=JDymd(year(df$Birthdate), month(df$Birthdate),day(df$Birthdate)), tmz=1)[,3]
df$Season
df %>%
group_by(Season, Zodiac) %>%
summarise(Population = n(),
Percentage = round(n()/nrow(df), 2),
Insolation = round(mean(Insolation), 2),
Age = paste(as.character(round(mean(Age), 2)), "±", as.character(round(sd(Age), 2)), sep=" "),
Sex = paste(round(length(Sex[Sex=="F"])/n(), 2)*100, "% f", sep="")) %>%
kable()
df %>%
group_by(Season, Zodiac) %>%
summarise(Population = n(),
Frequency = round(n()/nrow(df), 2),
Insolation = round(mean(Insolation), 2),
Age = paste(as.character(round(mean(Age), 2)), "±", as.character(round(sd(Age), 2)), sep=" "),
Sex = paste(round(length(Sex[Sex=="F"])/n(), 2)*100, "% f", sep="")) %>%
kable()
p_fishing <- function(df, zodiac=NULL, corrected=FALSE){
set.seed(666)
# Select numeric variables
df <- select_numeric(df) %>%
select_("-Insolation")
# Generate random sequence if no zodiac variable is provided
if (is.null(zodiac) == FALSE){
df$Zodiac <- zodiac
} else{
df$Zodiac <- sample(c("Capricorn","Aquarius","Pisces","Aries","Taurus",
"Gemini","Cancer","Leo","Virgo","Libra","Scorpio",
"Sagittarius"), size = nrow(df), replace=T)
}
# Iterate accross variables
significants <- c()
for(var in names(select_numeric(df))) {
fit <- lm(paste(var,  "~ Zodiac"), data=df) # Fit a linear model
p <- anova(fit)$`Pr(>F)`[1] # Extract p value
if (corrected == FALSE){
if (p < 0.05){
significants <- c(significants, var) # Store if significant
}
} else {
if (p.adjust(p, "bonf", n=ncol(df)) < 0.05){
significants <- c(significants, var) # Store if significant
}
}
}
return(significants)
}
# Which models are significant
real_sig <- p_fishing(df, df$Zodiac)
real_sig_adjusted <- p_fishing(df, df$Zodiac, corrected=TRUE)
# Proportion of significant models
real_prop <- length(real_sig)/length(select_numeric(df))
real_pro_adjusted <- length(real_sig)/length(select_numeric(df))
theorethical_prop <- c()
for(i in 1:1000){
sig <- p_fishing(df, zodiac=NULL)
prop <- length(sig)/length(select_numeric(df))
theorethical_prop <- c(theorethical_prop, prop)
}
theorethical_prop <- as.data.frame(theorethical_prop)
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop[(theorethical_prop<real_prop)])/nrow(theorethical_prop)*100, 1)), "% of those at random."))
plot
5/9
5/13
5/15
View(df)
p_fishing <- function(df, zodiac=NULL, corrected=FALSE){
set.seed(666)
# Select numeric variables
df <- select_numeric(df) %>%
select_("-Insolation, -Age")
# Generate random sequence if no zodiac variable is provided
if (is.null(zodiac) == FALSE){
df$Zodiac <- zodiac
} else{
df$Zodiac <- sample(c("Capricorn","Aquarius","Pisces","Aries","Taurus",
"Gemini","Cancer","Leo","Virgo","Libra","Scorpio",
"Sagittarius"), size = nrow(df), replace=T)
}
# Iterate accross variables
significants <- c()
for(var in names(select_numeric(df))) {
fit <- lm(paste(var,  "~ Zodiac"), data=df) # Fit a linear model
p <- anova(fit)$`Pr(>F)`[1] # Extract p value
if (corrected == FALSE){
if (p < 0.05){
significants <- c(significants, var) # Store if significant
}
} else {
if (p.adjust(p, "bonf", n=ncol(df)) < 0.05){
significants <- c(significants, var) # Store if significant
}
}
}
return(significants)
}
real_sig <- p_fishing(df, df$Zodiac)
p_fishing <- function(df, zodiac=NULL, corrected=FALSE){
set.seed(666)
# Select numeric variables
df <- select_numeric(df) %>%
select_("-Insolation", "-Age")
# Generate random sequence if no zodiac variable is provided
if (is.null(zodiac) == FALSE){
df$Zodiac <- zodiac
} else{
df$Zodiac <- sample(c("Capricorn","Aquarius","Pisces","Aries","Taurus",
"Gemini","Cancer","Leo","Virgo","Libra","Scorpio",
"Sagittarius"), size = nrow(df), replace=T)
}
# Iterate accross variables
significants <- c()
for(var in names(select_numeric(df))) {
fit <- lm(paste(var,  "~ Zodiac"), data=df) # Fit a linear model
p <- anova(fit)$`Pr(>F)`[1] # Extract p value
if (corrected == FALSE){
if (p < 0.05){
significants <- c(significants, var) # Store if significant
}
} else {
if (p.adjust(p, "bonf", n=ncol(df)) < 0.05){
significants <- c(significants, var) # Store if significant
}
}
}
return(significants)
}
real_sig <- p_fishing(df, df$Zodiac)
real_sig_adjusted <- p_fishing(df, df$Zodiac, corrected=TRUE)
vars <- df %>%
select(-Age, -Insolation)
vars <- df %>%
select_numeric() %>%
select(-Age, -Insolation)
View(vars)
df <- read.csv("df.csv")
names(df)
df <- select(df, -X)
write.csv("df2.csv", row.names = F)
write.csv(df, "df2.csv", row.names = F)
df <- read.csv("df.csv")
View(df)
# Zodiac Sign
df$Zodiac <- Zodiac(df$Birthdate)
# Seasons
df$Season <- season(df$Birthdate)
# Insolation
df$Insolation <- daylength(lat=48.5, long=2.20, jd=JDymd(year(df$Birthdate), month(df$Birthdate),day(df$Birthdate)), tmz=1)[,3]
p_fishing <- function(df, zodiac=NULL, corrected=FALSE){
set.seed(666)
# Select numeric variables
df <- select_numeric(df)
# Generate random sequence if no zodiac variable is provided
if (is.null(zodiac) == FALSE){
df$Zodiac <- zodiac
} else{
df$Zodiac <- sample(c("Capricorn","Aquarius","Pisces","Aries","Taurus",
"Gemini","Cancer","Leo","Virgo","Libra","Scorpio",
"Sagittarius"), size = nrow(df), replace=T)
}
# Iterate accross variables
significants <- c()
for(var in names(select_numeric(df))) {
fit <- lm(paste(var,  "~ Zodiac"), data=df) # Fit a linear model
p <- anova(fit)$`Pr(>F)`[1] # Extract p value
if (corrected == FALSE){
if (p < 0.05){
significants <- c(significants, var) # Store if significant
}
} else {
if (p.adjust(p, "bonf", n=ncol(df)) < 0.05){
significants <- c(significants, var) # Store if significant
}
}
}
return(significants)
}
vars <- df %>%
select_numeric() %>%
select(-Age, -Insolation)
View(vars)
real_sig <- p_fishing(df, df$Zodiac)
real_prop <- length(real_sig)/length(select_numeric(df))
real_sig_adjusted <- p_fishing(df, df$Zodiac, corrected=TRUE)
real_pro_adjusted <- length(real_sig)/length(select_numeric(df))
real_sig
vars <- df %>%
select(-Age, -Insolation)
View(vars)
vars <- df %>%
select_numeric() %>%
select(-Age, -Insolation)
real_sig <- p_fishing(vars, df$Zodiac)
real_sig_adjusted <- p_fishing(vars, df$Zodiac, corrected=TRUE)
real_prop <- length(real_sig)/length(select_numeric(df))
real_pro_adjusted <- length(real_sig)/length(select_numeric(df))
theorethical_prop <- c()
for(i in 1:1000){
sig <- p_fishing(vars, zodiac=NULL)
prop <- length(sig)/length(select_numeric(vars))
theorethical_prop <- c(theorethical_prop, prop)
}
theorethical_prop <- as.data.frame(theorethical_prop)
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop[(theorethical_prop<real_prop)])/nrow(theorethical_prop)*100, 1)), "% of those at random."))
plot
5/14
5/15
length(real_sig)
real_prop <- length(real_sig)/length(select_numeric(vars))
real_pro_adjusted <- length(real_sig)/length(select_numeric(vars))
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop[(theorethical_prop<real_prop)])/nrow(theorethical_prop)*100, 1)), "% of those at random."))
plot
ggsave("plots/Figure1.png", plot, height=7, width=10, dpi=600)
plot <- ggplot(df, aes(x=Season, y=ASQ_Feeling_of_Control)) +
stat_summary(aes(colour=Season), fun.data = mean_cl_boot) +
stat_summary(aes(group=1), fun.y = mean, geom="line", size=1) +
stat_summary(aes(group=1, colour=Season), fun.y = mean, geom="point", size=10) +
scale_colour_manual(values=c("#3F51B5", "#8BC34A", "#FFC107", "#E91E63")) +
theme_neuropsychology() +
ylab("Feeling of Control\n") +
xlab("")
plot
12*11/2
setwd("D:/Programs/Dropbox/RECHERCHE/N/Projects/Pedagogy/Statistics/Data")
library(neuropsychology)
library(knitr)
df <- read.csv("df.csv")
vars <- df %>%
select(starts_with("Q"))
fit <- lm(Q13_Satisfaction ~ ., data=vars)
tidy(fit)
library(tidyverse)
library(broom)
tidy(fit)
glance(fit)
round(tidy(fit), 2)
fit <- lm(Q13_Satisfaction ~ ., data=vars)
round(tidy(fit), 2)
tidy(fit)
augment(fit)
APAze(fit)
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_point() +
geom_line(method="lm") +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter() +
geom_smooth(method="lm") +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_point() +
geom_smooth(method="lm") +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter() +
geom_smooth(method="lm") +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.1, height=0.1) +
geom_smooth(method="lm") +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.1, height=0.1, size=2, alpha=0.5) +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.1, height=0.1, size=2, alpha=0.5, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.1, height=0.1, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology()
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
library(plotly)
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n") %>%
ggplotly()
df %>%
ggplotly() %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
ggplotly(plot)
```{r, echo=TRUE, message=FALSE, warning=FALSE}
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
ggplotly(plot)
plot
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_point()
ggplotly(plot)
library(plotly)
plotly::ggplotly()
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
ggplotly()
install.packages("plotly")
library(knitr)
library(neuropsychology)
library(tidyverse)
library(plotly)
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well.") +
ylab("Q13. I'm generally satisfied.\n")
ggplotly(plot)
knit_with_parameters('D:/Programs/Dropbox/RECHERCHE/N/Projects/Pedagogy/Statistics/Data/Analysis.Rmd')
knit_with_parameters('D:/Programs/Dropbox/RECHERCHE/N/Projects/Pedagogy/Statistics/Data/Analysis.Rmd')
library(knitr)
library(neuropsychology)
library(tidyverse)
library(plotly)
df <- read.csv("df.csv")
library(broom)
vars <- df %>%
select(starts_with("Q"))
fit <- lm(Q13_Satisfaction ~ ., data=vars)
summary(fit)
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q3_Teaching)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well") +
ylab("Q13. I'm generally satisfied\n")
ggplotly(plot)
install.packages("factoextra")
factoextra::fviz_pca(df)
library(FactoMineR)
library(factoextra)
pca <- PCA(df)
vars <- df %>%
select(starts_with("Q")) %>%
select(-starts_with("Q13"))
pca <- PCA(df)
pca <- PCA(df)
