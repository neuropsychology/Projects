df %>%
psych::describe() %>%
dplyr::transmute_(variable="variables",
missings="n_total" - "n",
prop_missings=missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=lazyeval::interp("variables"),
missings=lazyeval::interp("n_total - n"),
prop_missings=missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=lazyeval::interp("variables"),
missings=lazyeval::interp("n_total - n"),
prop_missings=lazyeval::interp("missings/n_total"),
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=lazyeval::interp("variables"),
missings=lazyeval::interp("n_total - n"),
prop_missings=lazyeval::interp("missings/n_total"),
mean=lazyeval::interp("mean"),
sd=lazyeval::interp("sd"),
median=lazyeval::interp("median"),
min=lazyeval::interp("min"),
max=lazyeval::interp("max"),
skew=lazyeval::interp("skew"),
kurtosis=lazyeval::interp("kurtosis"))
df %>%
psych::describe() %>%
dplyr::transmute(variable=lazyeval::interp("variables"),
missings=lazyeval::interp("n_total - n"),
prop_missings=lazyeval::interp("missings/n_total"),
mean=lazyeval::interp("mean"),
sd=lazyeval::interp("sd"),
median=lazyeval::interp("median"),
min=lazyeval::interp("min"),
max=lazyeval::interp("max"),
skew=lazyeval::interp("skew"),
kurtosis=lazyeval::interp("kurtosis"))
df %>%
psych::describe() %>%
dplyr::transmute_(variable=variables,
missings=n_total - n,
prop_missings=missings/n_total,
mean=mean,
sd=sd,
median=median,
min=min,
max=max,
skew=skew,
kurtosis=kurtosis)
df %>%
psych::describe()
df %>%
psych::describe() %>%
dplyr::transmute_(variable=~variables,
missings=~n_total-~n,
prop_missings=~missings/~n_total,
mean=~mean,
sd=~sd,
median=m~edian,
min=~min,
max=~max,
skew=~skew,
kurtosis=~kurtosis)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=~variables,
missings=~n_total-~n,
prop_missings=~missings/~n_total,
mean=~mean,
sd=~sd,
median=~median,
min=~min,
max=~max,
skew=~skew,
kurtosis=~kurtosis)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=quote(variables),
missings=quote(n_total)-quote(n),
prop_missings=quote(missings)/quote(n_total),
mean=quote(mean),
sd=quote(sd),
median=quote(median),
min=quote(min),
max=quote(max),
skew=quote(skew),
kurtosis=quote(kurtosis))
df %>%
psych::describe() %>%
dplyr::transmute_(variable=quote(variables))
df %>%
psych::describe() %>%
dplyr::transmute_(variable="variables")
df %>%
psych::describe() %>%
dplyr::transmute_(variable=~variables)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=~variables,
missings=~n_total-n)
df %>%
psych::describe() %>%
dplyr::transmute_(variable=~variables,
missings=~n_total-n,
prop_missings=~missings/n_total,
mean=~mean,
sd=~sd,
median=~median,
min=~min,
max=~max,
skew=~skew,
kurtosis=~kurtosis)
fa <- fa(select(df, starts_with("ASQ")))
library(psych)
fa <- psych::fa(select(df, starts_with("FFMQ")))
library(psych)
fa <- psych::fa(select(personality, starts_with("FFMQ")))
df <- df_original %>%
filter(!is.na(Detection_Answer),
!is.na(Recognition_Answser),
Blind==F) %>%
mutate(Detection = ifelse(Detection_Answer=="Detected", 1, 0),
Detection=as.factor(Detection),
Full_Detection = Target_Category_Correct,
Recognition_Answer=Recognition_Answser,
Recognition=as.factor(ifelse(Recognition_Answer=="Non", 0, 1))) %>%
select(Participant_ID,
Stimulus,
Condition,
SOA,
SOA_Mean_Inversion,
Recognition,
Recognition_Answer,
Detection_Answer,
Detection,
Full_Detection,
starts_with("FFMQ_"),
starts_with("ASQ_"))
fa <- psych::fa(select(personality, starts_with("FFMQ")))
df <- select(personality, starts_with("FFMQ"))
df <- select(personality, starts_with("ASQ"))
df <- select(personality, starts_with("IPIP"))
summary(personality)
df <- select_numeric(personality)
fa <- psych::fa(df)
treshold=0
round=2
labels=NA
loadings <- fa$loadings %>%
dplyr::unclass() %>%
as.data.frame()
loadings[abs(loadings) <= abs(treshold)] <- NA
loadings <- fa$loadings %>%
unclass() %>%
as.data.frame()
loadings[abs(loadings) <= abs(treshold)] <- NA
n_factors <- length(loadings)
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){loadings$Label <- labels}
else{loadings$Label <- 1:nrow(loadings)}
# Add item labels
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){loadings$Label <- labels}
else{loadings$Label <- 1:nrow(loadings)}
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings))
{loadings$Label <- labels}
else
{loadings$Label <- 1:nrow(loadings)}
loadings$Item <- rownames(loadings)
if(length(labels)==nrow(loadings)){
} else {loadings$Label <- 1:nrow(loadings)}
loadings$N <- 1:nrow(loadings)
loadings %>%
dplyr::gather_(~Component, ~Loading, -~Item, -~N, -~Label) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(which.max(~Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_(~Component, ~Loading, -~Item, -~N, -~Label) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(which.max(~Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_(~Component, ~Loading, ~-Item, ~-N, ~-Label) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(which.max(~Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_(~Component, ~Loading, ~-Item, ~-N, ~-Label)
loadings %>%
tidyr::gather_(~Component, Loading, -Item, -N, -Label)
loadings %>%
tidyr::gather_("Component, Loading, -Item, -N, -Label") %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(which.max(~Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_("Component", "Loading", "-Item", "-N", "-Label")
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label")))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(which.max(~Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, desc(~Loading))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, desc(Loading))
loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
max <- loadings %>%
tidyr::gather_("Component", "Loading", setdiff(names(.), c("Item", "N", "Label"))) %>%
dplyr::group_by_(~Item) %>%
dplyr::slice_(~which.max(Loading)) %>%
dplyr::arrange_(~Component, ~desc(Loading))
if(length(labels)!=nrow(loadings)){
max <- dplyr::select(max, -Label)
loadings <- dplyr::select(loadings, -Label)
}
loadings <- loadings[order(max$N), ]
loadings[1:n_factors] <- round(loadings[1:n_factors], round)
season <- function(date){
d <- as.Date(cut(as.Date(date), "month")) + 32
season <- factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
return(season)
}
season("2012-03-03")
season("03-03-2012")
date <- "2012-03-03"
d <- as.Date(cut(as.Date(date), "month")) + 32
season <- factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
d <- c(d)
season <- factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
d <- as.array(d)
season <- factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
quarters(d)
d <- as.factor(d)
season <- factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
date <- c("2012-03-03", "2012-03-05", "2012-03-03","2012-06-03")
season(date)
d <- as.Date(cut(as.Date(date), "month")) + 32
as.Date(date)
cut(as.Date(date), "month")
as.Date(cut(as.Date(date), "month"))
setwd("D:/Programs/Dropbox/RECHERCHE/articles/Package_Mindfulness/Zodiac/Statistics")
df <- read.csv("df.csv")
d <- as.Date(cut(as.Date(df$Birthdate), "month")) + 32
factor(quarters(d), labels = c("Winter", "Spring", "Summer", "Fall"))
as.Date(df$Birthdate), "month")
cut(as.Date(df$Birthdate), "month")
df$Birthdate
date <- as.factor(date)
date <- c("2012-03-03", "2012-03-05", "2012-08-03","2012-06-03")
date <- as.factor(date)
season(date)
date2 <- df$Birthdate
date <- c("2012-03-03", "2012-03-05", "2012-08-03","2012-06-03", "2013-01-11")
season(date)
season(date2)
date <- as.factor(date)
season(date)
date3 <- date2[1:5]
date3 <- droplevels(date3)
season(date3)
date3 <- date2[1:10]
date3 <- droplevels(date3)
season(date3)
date3 <- date2[1:8]
date3 <- droplevels(date3)
season(date3)
date3 <- date2[1:7]
date3 <- droplevels(date3)
season(date3)
date3 <- date2[1:8]
date3 <- droplevels(date3)
date3
date4 <- c("2017-02-15", "2017-05-15", "2017-08-15", "2017-11-15")
season(date4)
library(DescTools)
citation("DescTools")
library(insol)
ciraton("insol")
citation("insol")
setwd("D:/Programs/Dropbox/RECHERCHE/articles/Package_Mindfulness/Zodiac/Statistics")
library(knitr)
library(neuropsychology)
library(tidyverse)
library(lsmeans)
library(lme4)
library(plotly)
df <- read.csv("df.csv")
library(DescTools)
library(insol)
library(lubridate)
# Zodiac Sign
df$Zodiac <- Zodiac(df$Birthdate)
# Seasons
df$Season <- season(df$Birthdate)
# Insolation
df$Insolation <- daylength(lat=48.5, long=2.20, jd=JDymd(year(df$Birthdate), month(df$Birthdate),day(df$Birthdate)), tmz=1)[,3]
vars <- df %>%
select_numeric() %>%
select(-Age, -Insolation)
# Which models are significant
real_sig <- p_fishing(vars, df$Zodiac)
p_fishing <- function(df, zodiac=NULL, corrected=FALSE){
set.seed(666)
# Select numeric variables
df <- select_numeric(df)
# Generate random sequence if no zodiac variable is provided
if (is.null(zodiac) == FALSE){
df$Zodiac <- zodiac
} else{
df$Zodiac <- sample(c("Capricorn","Aquarius","Pisces","Aries","Taurus",
"Gemini","Cancer","Leo","Virgo","Libra","Scorpio",
"Sagittarius"), size = nrow(df), replace=T)
}
# Iterate accross variables
significants <- c()
for(var in names(select_numeric(df))) {
fit <- lm(paste(var,  "~ Zodiac"), data=df) # Fit a linear model
p <- anova(fit)$`Pr(>F)`[1] # Extract p value
if (corrected == FALSE){
if (p < 0.05){
significants <- c(significants, var) # Store if significant
}
} else {
if (p.adjust(p, "bonf", n=ncol(df)) < 0.05){
significants <- c(significants, var) # Store if significant
}
}
}
return(significants)
}
vars <- df %>%
select_numeric() %>%
select(-Age, -Insolation)
# Which models are significant
real_sig <- p_fishing(vars, df$Zodiac)
real_sig_adjusted <- p_fishing(vars, df$Zodiac, corrected=TRUE)
# Proportion of significant models
real_prop <- length(real_sig)/length(select_numeric(vars))
real_pro_adjusted <- length(real_sig)/length(select_numeric(vars))
theorethical_prop <- c()
for(i in 1:1000){
sig <- p_fishing(vars, zodiac=NULL, corrected=TRUE)
prop <- length(sig)/length(select_numeric(vars))
theorethical_prop <- c(theorethical_prop, prop)
}
theorethical_prop <- as.data.frame(theorethical_prop)
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop[(theorethical_prop<real_prop)])/nrow(theorethical_prop)*100, 1)), "% of those at random."))
plot
theorethical_prop
p.adjust(0.05, "bonf", 14)
p.adjust(0.02, "bonf", 14)
p.adjust(0.01, "bonf", 14)
p.adjust(0.005, "bonf", 14)
p.adjust(0.004, "bonf", 14)
p.adjust(0.003, "bonf", 14)
p.adjust(0.0035, "bonf", 14)
p.adjust(0.0036, "bonf", 14)
theorethical_prop <- c()
for(i in 1:1000){
sig <- p_fishing(vars, zodiac=NULL, corrected=F)
prop <- length(sig)/length(select_numeric(vars))
theorethical_prop <- c(theorethical_prop, prop)
}
theorethical_prop <- as.data.frame(theorethical_prop)
# Adjusted
theorethical_prop_adjusted <- c()
for(i in 1:1000){
sig <- p_fishing(vars, zodiac=NULL, corrected=T)
prop <- length(sig)/length(select_numeric(vars))
theorethical_prop_adjusted <- c(theorethical_prop_adjusted, prop)
}
theorethical_prop_adjusted <- as.data.frame(theorethical_prop)
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop[(theorethical_prop<real_prop)])/nrow(theorethical_prop)*100, 1)), "% of those at random."))
plot
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop_adjusted)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models (Adjusted)") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop_adjusted[(theorethical_prop_adjusted<real_prop)])/nrow(theorethical_prop_adjusted)*100, 1)), "% of those at random."))
plot
theorethical_prop_adjusted
plot <- ggplot(theorethical_prop, aes(x=theorethical_prop_adjusted)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models (Adjusted)") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop_adjusted[(theorethical_prop_adjusted<real_prop)])/nrow(theorethical_prop_adjusted)*100, 1)), "% of those at random."))
plot
mean(theorethical_prop_adjusted)
theorethical_prop_adjusted
plot <- ggplot(theorethical_prop_adjusted, aes(x=theorethical_prop_adjusted)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models (Adjusted)") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop_adjusted[(theorethical_prop_adjusted<real_prop)])/nrow(theorethical_prop_adjusted)*100, 1)), "% of those at random."))
plot
mean(theorethical_prop_adjusted$theorethical_prop_adjusted)
theorethical_prop_adjusted <- c()
for(i in 1:1000){
sig <- p_fishing(vars, zodiac=NULL, corrected=T)
prop <- length(sig)/length(select_numeric(vars))
theorethical_prop_adjusted <- c(theorethical_prop_adjusted, prop)
}
theorethical_prop_adjusted <- as.data.frame(theorethical_prop_adjusted)
plot <- ggplot(theorethical_prop_adjusted, aes(x=theorethical_prop_adjusted)) +
geom_density(fill="#2196F3", adjust=5) +
geom_vline(xintercept=real_prop, colour="#E91E63", size=2) +
theme_neuropsychology() +
xlab("\nProportion of Significant Models (Adjusted)") +
ylab("Density\n") +
annotate("text", x=0.21, y=5, size = 5.25, label=paste("Observed proportion >", as.character(round(length(theorethical_prop_adjusted[(theorethical_prop_adjusted<real_prop)])/nrow(theorethical_prop_adjusted)*100, 1)), "% of those at random."))
plot
mean(theorethical_prop_adjusted$theorethical_prop_adjusted)
max(theorethical_prop_adjusted$theorethical_prop_adjusted)
max(theorethical_prop_adjusted$theorethical_prop_adjusted)
zodiac <- lm(ASQ_Feeling_of_Control ~ Zodiac, data=df)
season <- lm(ASQ_Feeling_of_Control ~ Season, data=df)
insolation <- lm(ASQ_Feeling_of_Control ~ Insolation, data=df)
tidy(lsmeans(zodiac, pairwise~Zodiac, adjust="bonf"))
library(broom)
tidy(lsmeans(zodiac, pairwise~Zodiac, adjust="bonf"))
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
library(neuropsychology)
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
install.packages("stringi")
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R")
library("neuropsychology")
knit_with_parameters('E:/Dropbox/RECHERCHE/N/Projects/Pedagogy/Statistics/Data/Analysis.Rmd')
setwd("E:/Dropbox/RECHERCHE/N/Projects/Pedagogy/Statistics")
library(knitr)
library(neuropsychology)
library(tidyverse)
library(plotly)
df <- read.csv("df.csv")
library(broom)
vars <- df %>%
select(starts_with("Q"))
fit <- lm(Q13_Satisfaction ~ ., data=vars)
summary(fit)
plot <- df %>%
ggplot(aes(y=Q13_Satisfaction, x=Q2_Interest)) +
geom_jitter(width=0.05, height=0.05, size=4, shape="+") +
geom_smooth(method="lm", fullrange=T) +
theme_neuropsychology() +
xlab("\nQ3. The teacher explained well") +
ylab("Q13. I'm generally satisfied\n")
ggplotly(plot)
